paper-id: sb-058
pdf-id: sb-084
graphs:
  ast:
    name: ast (binarised)
    description: n/a
    artefacts:
      - name: source code
        details: n/a
    vertex-type: ast
    edge-type: ast
    vertex-features: |-
      leaf node content encoded using word2vec.
      
      node types weighted using tf/idf
    edge-features: n/a
    connectivity-features: not specified
    graph-features: n/a
    other-features: source code text
models:
  model:
    name: n/a
    architecture-attributes:
      - use bottom-up auto-encoder to learn node embeddings; learn representation for child nodes, use encoder output as parent embedding
      - final output is sum of the embeddings of all nodes, weighted according to the (normalised) tf/idf weights
      - detect clones using euclidean distance
tasks:
  code-clone-detection:
    training-objective: Given two code samples, determine if they are clones
    training-granularity: graph classification (but two graphs)
    working-objective: Given two code samples, determine if they are clones
    working-granularity: graph classification (but two graphs)
    application: Code clone detection
    supervision: supervised
combinations:
  - graph: ast
    model: model
    task: code clone detection
    comments:
comments: # list