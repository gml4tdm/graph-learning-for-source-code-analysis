paper-id: 141
pdf-id: 186
graphs:
  augmented-ast:
    name: n/a
    description: AST augmented with additional information
    artefacts:
      - name: Source code
        details: n/a
    vertex-type:
      - name: AST Node
        details: n/a
      - name: Variable Node
        details: |-
          One node for each variable.
          All occurrences of a variable are attached to the unique note for that variable
    edge-type:
      - name: Child Edge
        details: Regular AST Edge
      - name: Sibling Edge
        details: Connect child node to its sibling successor (represent order or "arguments" for an AST Node)
      - name: Read Edge
        details: Used to connect a variable occurrence to the unique node for that variable
      - name: Write Edge
        details: Used to connect a variable occurrence to the unique node for that variable
      - name: Chronological Edge
        details: Establish order between nodes referencing the same variable name
    vertex-features: Not specified what is used for node features
    edge-features: n/a
    connectivity-features: Not specified
    graph-features: n/a
    other-features: n/a
models:
  model:
    type:
      name: n/a
      architecture: |-
        Two inputs; typically faulty program and correct program.
        Encoded in parallel:
          R-GCN, LayerNormalisation, ReLU (5x Repeated w/ the same weights)
        For each possible pairing of (unique) variable nodes (a, b) 
        (where a is from the faulty program and b is from the correct program),
        compute the dot product between a and b; arrange all dot products in a matrix,
        and compute row-wise softmax 
        (entry m_{ij} denote the probability that variable i in the faulty program maps to variable j in the correct program).
tasks:
  variable-mapping:
    training-objective: Map variables to one program to variables in another program
    training-granularity: n/a (similar to either node classification or link prediction, but not quite)
    working-objective: Map variables to one program to variables in another program
    working-granularity: n/a (similar to either node classification or link prediction, but not quite)
    application: Variable Mapping (can be used for downstream tasks such as program repair)
    supervision: Supervised (but training data can be automatically generated by mutating progams)
combinations:
  - graph: augmented-ast
    model: model
    task: variable-mapping
    comments:
comments: # list