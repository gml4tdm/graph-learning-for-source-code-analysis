paper-id: 129
pdf-id: 172
graphs:
  ast-within: &ast
    name: AST
    description: n/a
    artefacts:
      - name: Source code
        details: File
    vertex-type:
      - name: AST Node
        details: Only method calls (incl. class creation), declarations, and control flow nodes are kept.
    edge-type:
      - name: AST Edge
        details: n/a
    vertex-features: n/a
    edge-features: n/a
    connectivity-features: n/a
    graph-features: n/a
    other-features: Content of tokens is put into a sequence
  ast-cross:
    <<: *ast
    other-features: Node types are put into a sequence
  class-dependency-network:
    name: Class Dependency Network (CDN)
    description: Serves as the "larger" context (``external features'') for the file.
    artefacts:
      - name: Source code
        details: Files/project
    vertex-type:
      - name: Class
        details: n/a
    edge-type:
      - name: Dependency
        details: Inheritance/implementation, fields (A has field of type B), method invocation (A calls method of B)
    vertex-features: |-
      Various static code analysis metrics (e.. LOC, afferent coupling, CBO)
      Network metrics generated using node2vec.
    edge-features: n/a
    connectivity-features: n/a
    graph-features: n/a
    other-features: n/a
models:
  encoder:
    type:
      name: n/a
      architecture: |-
        Two inputs:
          1) Tokens 
            Embedding Layer  
            CNN w/ ReLU 
            Max pooling
          2) Graph 
            GCN w/ ReLU
            GCN
        Weighted concatenation; concat(\alpha * TextEmbedding, (1 - alpha) * GraphEmbedding)
        FNN Layer w/ ReLU 
        Softmax 
        
        NOTE: this model is used to compute embeddings used by a downstream model
        NOTE: for embedding, the outputs of the FNN layer _before_ ReLU are used.
  random-forest:
    type:
      name: Random Forest
      architecture: Random Forest
  mlp:
    type:
      name: Multi-Layer Perceptron
      architecture: MLP
tasks:
  within-project-defect-prediction:
    training-objective: |-
      encoder model: Predict sample as defect or not defect 
      random forest: Predict sample as defect or not defect
    training-granularity: Embedding and Classification
    working-objective: |-
      encoder model: Compute embedding of code sample 
      random forest: Predict sample as defect or not defect
    working-granularity: Embedding and Classification
    application: Defect prediction (file-level), in the same project
    supervision: Supervised
  cross-project-defect-prediction:
    training-objective: |-
      encoder model: Predict sample as defect or not defect 
      mlp: Predict sample as defect or not defect
    training-granularity: Embedding and Classification
    working-objective: |-
      encoder model: Compute embedding of code sample 
      mlp: Predict sample as defect or not defect
    working-granularity: Embedding and Classification
    application: Defect prediction (file-level), in a different [foreign] project
    supervision: Supervised
combinations:
  - graph: ast + class-dependency-network
    model: encoder + random-forest
    task: within-project-defect-prediction
    comments:
  - graph: ast + class-dependency-network
    model: encoder + mlp
    task: cross-project-defect-prediction
    comments:
comments: # list