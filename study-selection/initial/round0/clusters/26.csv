Title,Abstract
A Heterogeneous Graph to Abstract Syntax Tree Framework for Text-to-SQL,"Text-to-SQL is the task of converting a natural language utterance plus the corresponding database schema into a SQL program. The inputs naturally form a heterogeneous graph while the output SQL can be transduced into an abstract syntax tree (AST). Traditional encoder-decoder models ignore higher-order semantics in heterogeneous graph encoding and introduce permutation biases during AST construction, thus incapable of exploiting the refined structure knowledge precisely. In this work, we propose a generic heterogeneous graph to abstract syntax tree (HG2AST) framework to integrate dedicated structure knowledge into statistics-based models. On the encoder side, we leverage a line graph enhanced encoder (LGESQL) to iteratively update both node and edge features through dual graph message passing and aggregation. On the decoder side, a grammar-based decoder first constructs the equivalent SQL AST and then transforms it into the desired SQL via post-processing. To avoid over-fitting permutation biases, we propose a golden tree-oriented learning (GTL) algorithm to adaptively control the expanding order of AST nodes. The graph encoder and tree decoder are combined into a unified framework through two auxiliary modules. Extensive experiments on various text-to-SQL datasets, including single/multi-table, single/cross-domain, and multilingual settings, demonstrate the superiority and broad applicability.  © 1979-2012 IEEE."
Syntax Tree Constrained Graph Network for Visual Question Answering,"Visual Question Answering (VQA) aims to automatically answer natural language questions related to given image content. Existing VQA methods integrate vision modeling and language understanding to explore the deep semantics of the question. However, these methods ignore the significant syntax information of the question, which plays a vital role in understanding the essential semantics of the question and guiding the visual feature refinement. To fill the gap, we suggested a novel Syntax Tree Constrained Graph Network (STCGN) for VQA based on entity message passing and syntax tree. This model is able to extract a syntax tree from questions and obtain more precise syntax information. Specifically, we parse questions and obtain the question syntax tree using the Stanford syntax parsing tool. From the word level and phrase level, syntactic phrase features and question features are extracted using a hierarchical tree convolutional network. We then design a message-passing mechanism for phrase-aware visual entities and capture entity features according to a given visual context. Extensive experiments on VQA2.0 datasets demonstrate the superiority of our proposed model. © 2024, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd."
Study on Automatic Code Summary Generation Method based on Graph Neural Network,"Automatic code summary generation techniques can help developers and other technical personnel to understand and comprehend the functions and structure of code more quickly. In existing methods of automatic code abstraction generation, there is a problem of poor utilization of code structure information, therefore, a model of automatic code abstraction generation based on graph neural network is proposed. Firstly, the abstract syntax tree is extracted from the code, and then the abstract syntax tree of the code is transformed into a graph representation using control flow statements in the data stream, which is trained by a graph convolutional neural network, and the obtained training results are fused with the original sequence representation to finally obtain a source code representation that incorporates the semantic information of the code context and structural information. Meanwhile, to improve the stability of the summary generation model, a deep learning model based on a multi-headed self-attentive mechanism is used to improve the existing sequence-to-sequence summary generation model. The accuracy and stability of the model-generated summaries are improved. Validation was performed on publicly available datasets, and experimental results show that the method achieves better results on BLEU-4, METEOR, and ROUGE-L metrics compared to other baseline models.  © 2023 IEEE."
Automatic Code Annotation Generation Based on Multi-dimensional Heterogeneous Graph Structure,"The task of automatic code annotation generation has become a research hotspot considering code annotations can enhance the readability of source code and assist the software development process. While some researchers have exploited the sequence information or abstract syntax tree information of source code，the multiple features specific to the code language have not been studied. Therefore，to further exploit the multi-dimensional features of source code and improve the annotation generation effect，this study uses a heterogeneous graph structure and graph neural network to fuse and construct the abstract syntax tree，control flow graph，and data flow graph of the source code into a heterogeneous representation graph with multiple nodes and edges to represent the multi-dimensional features such as semantic features，sequence features，syntax features，and structural features of the code. Furthermore，this study proposes an automatic code annotation generation model based on a multi-dimensional heterogeneous graph structure. The experimental results show that the proposed model can perform better on the real datasets compared to other current models such as Hybrid-DRL，NeuralCodeSum，SeqGNN，et al. The highest improvement in BLEU-4，METEOR，and ROUGE-L metrics are 1.6%，3.2%，and 3.1%，respectively，which obtained more fluent and readable code annotations. © 2023, Editorial Office of Computer Engineering. All rights reserved."
Heterogeneous Directed Hypergraph Neural Network over abstract syntax tree (AST) for Code Classification,"Code classification is a difficult issue in program understanding and automatic coding. Due to the elusive syntax and complicated semantics in programs, most existing studies use techniques based on abstract syntax tree (AST) and graph neural network (GNN) to create code representations for code classification. These techniques utilize the structure and semantic information of the code, but they only take into account pairwise associations and neglect the high-order correlations that already exist between nodes in the AST, which may result in the loss of code structural information. On the other hand, while a general hypergraph can encode high-order data correlations, it is homogeneous and undirected which will result in a lack of semantic and structural information such as node types, edge types, and directions between child nodes and parent nodes when modeling AST. In this study, we propose to represent AST as a heterogeneous directed hypergraph (HDHG) and process the graph by heterogeneous directed hypergraph neural network (HDHGN) for code classification. Our method improves code understanding and can represent high-order data correlations beyond paired interactions. We assess heterogeneous directed hypergraph neural network (HDHGN) on public datasets of Python and Java programs. Our method outperforms previous AST-based and GNN-based methods, which demonstrates the capability of our model. © 2023 Knowledge Systems Institute Graduate School. All rights reserved."
Multi-View Graph Representation for Programming Language Processing: An Investigation into Algorithm Detection,"Program representation, which aims at converting program source code into vectors with automatically extracted features, is a fundamental problem in programming language processing (PLP). Recent work tries to represent programs with neural networks based on source code structures. However, such methods often focus on the syntax and consider only one single perspective of programs, limiting the representation power of models. This paper proposes a multi-view graph (MVG) program representation method. MVG pays more attention to code semantics and simultaneously includes both data flow and control flow as multiple views. These views are then combined and processed by a graph neural network (GNN) to obtain a comprehensive program representation that covers various aspects. We thoroughly evaluate our proposed MVG approach in the context of algorithm detection, an important and challenging subfield of PLP. Specifically, we use a public dataset POJ-104 and also construct a new challenging dataset ALG-109 to test our method. In experiments, MVG outperforms previous methods significantly, demonstrating our model's strong capability of representing source code. © 2022, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved."
Cognitive Complexity Reduction through Control Flow Graph Generation,"The cognitive complexity of a software determines the human comprehension effort to determine its underlying logic. The human comprehension effort preliminary depends on the person, who deals with the software, the source code and the problem to be addressed. The understandability of a given source code is varying with each user such that the cognitive complexity results with a subjective measurement. The graphical representation of the logical behavior of a source code implies the individual to comprehend the logic easily rather than referring to its original code base. This paper evaluates the possibility of using control flow graph representation to reduce the cognitive complexity of a given source code, thereby ensuring a less software complexity. © 2022 IEEE."
Learning to Represent Programs with Heterogeneous Graphs,"Code representation, which transforms programs into vectors with semantics, is essential for source code processing. We have witnessed the effectiveness of incorporating structural information (i.e., graph) into code representations in recent years. Specifically, the abstract syntax tree (AST) and the AST-augmented graph of the program contain much structural and semantic information, and most existing studies apply them for code representation. The graph adopted by existing approaches is homogeneous, i.e., it discards the type information of the edges and the nodes lying within AST. That may cause plausible obstruction to the representation model. In this paper, we propose to leverage the type information in the graph for code representation. To be specific, we propose the heterogeneous program graph (HPG), which provides the types of the nodes and the edges explicitly. Furthermore, we employ the heterogeneous graph transformer (HGT) architecture to generate representations based on HPG, considering the type of information during processing. With the additional types in HPG, our approach can capture complex structural information, produce accurate and delicate representations, and finally perform well on certain tasks. Our in-depth evaluations upon four classic datasets for two typical tasks (i.e., method name prediction and code classification) demonstrate that the heterogeneous types in HPG benefit the representation models. Our proposed HPG+HGT also outperforms the SOTA baselines on the subject tasks and datasets.  © 2022 ACM."
Code Representation Based on Hybrid Graph Modelling,"Several sequence- or abstract syntax tree (AST)-based models have been proposed for modelling lexical-level and syntactic-level information of source code. However, an effective method of learning code semantic information is still lacking. Thus, we propose a novel code representation method based on hybrid graph modelling, called HGCR. HGCR is a code information extraction model. Specifically, in HGCR, two novel graphs, the Structure Graph (SG) and the Execution Data Flow Graph (EDFG), are first extracted from AST to model the syntactic structural and semantic information of source code, respectively. Then, two improved graph neural networks are applied to learn the graphs to obtain an effective code representation. We demonstrate the effectiveness of our model on two common code understanding tasks: code classification and code clone detection. Empirically, our model outperforms state-of-the-art models. © 2021, Springer Nature Switzerland AG."
Upcycling formal specifications for similar implementations with Arís,"We describe the Arís system for creating new formal specifications for source code by transferring existing specifications to similar implementations. We show the code graphs underlying its operation, graph matching supports retrieval, and pattern completion enables transfer of specifications to new implementations. A theorem prover formally verifies the new specifications. Copyright © 2021 for this paper by its authors."
Code Completion by Modeling Flattened Abstract Syntax Trees as Graphs,"Code completion has become an essential component of integrated development environments. Contemporary code completion methods rely on the abstract syntax tree (AST) to generate syntactically correct code. However, they cannot fully capture the sequential and repetitive patterns of writing code and the structural information of the AST. To alleviate these problems, we propose a new code completion approach named CCAG, which models the flattened sequence of a partial AST as an AST graph. CCAG uses our proposed AST Graph Attention Block to capture different dependencies in the AST graph for representation learning in code completion. The sub-tasks of code completion are optimized via multi-task learning in CCAG, and the task balance is automatically achieved using uncertainty without the need to tune task weights. The experimental results show that CCAG has superior performance than state-of-the-art approaches and it is able to provide intelligent code completion. © 2021, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved."
Using the Sage++ Toolkit to Model Control Flow and Extend Cyclomatic Complexity,"The unavailability of comprehensive, user-friendly programming environments is one of the most imposing obstacles to the development and testing of software applications. The most critical advances needed to remove the obstacles are improved tools for program analysis, visualization, evaluation, and debugging. In this project, we use a tool, Sage++, to model control flow using an internal representation of the source code called a program tree, a form similar to an abstract syntax tree. We use the xvcg tool to visualize the control flow graph. To facilitate program evaluation, the control flow graph representation is used to compute software complexity using McCabe's cyclomatic complexity measure. Since cyclomatic complexity does not include program exceptions in its consideration, we extend the complexity measure to include C++ exceptions, since they alter flow of control and thereby affect the cyclomatic complexity of the program."
Customizable portrayals of program structure,"Current debugging tools offer few facilities for user-defined views of program behavior; those that exist are difficult to use. This paper demonstrates that visual idioms derived from the programmer's conceptual view can make debugging both easier and more responsive to user needs. Ii describes a user-defined abstraction, the program phase tree (PPT), that displays information on dynamic program structure. The PPT is specified interactively with the help of a graphical editing tool. Since the user docs not need to modify program code, nor learn a specification language, no new source of error is introduced. Moreover, since the visual idiom - representation of program structure as a tree of activity phases - is derived from the familiar concept of a call graph, learning time is negligible. The integration of PPT representations into two common types of parallel debuggers (breakpoint-style and trace-based) is described."
Understanding C programs using the Combined C graph representation,"The process of program comprehension is often aided by the use of static analysis tools to provide a maintainer with different views of the code. Each view however often requires a different intermediate program representation, leading to redundancies and repetition of information. A solution is to develop a single intermediate representation which contains sufficient information to construct each program view. This paper describes the Combined C Graph (CCG), a fine-grained intermediate representation for programs written in the C language from which program slices, call graph, flow-sensitive data flow, definition-use and control dependence views can be easily constructed. The CCG allows the representation of embedded side effects and control flows and value-returning functions with value parameters. The effects of pointer parameters are also modelled. Construction of the CCG makes use of the PERPLEX C analysis tool which produces a generic Prolog fact base representation of the source code. Existing data flow analysis techniques are extended to allow the computation of flow-sensitive data flow analysis information. © 1994 IEEE."
