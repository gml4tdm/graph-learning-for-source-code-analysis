Title Full,URL,PDF ID,Inclusion,Criteria,Comment
" Raychev V., Vechev M., Krause A., Predicting program properties from ”Big Code”, SIGPLAN Not., 50, 1, pp. 111-124, (2015)",https://www.google.com/search?q=predicting program properties from ”big code”,sb-001,Include,"I1.1,I1.2",
" Brockschmidt M., Allamanis M., Gaunt A.L., Polozov O., Generative Code Modeling with Graphs, International Conference on Learning Representations, (2019)",https://www.google.com/search?q=generative code modeling with graphs,sb-004,Include,I1.1,
" DAI H., TIAN Y., DAI B., SKIENA S., SONG L., Syntax-directed variational autoencoder for structured data, Proceedings of the 6th International Conference on Learning Representations, (2018)",https://www.google.com/search?q=syntax-directed variational autoencoder for structured data,sb-005,Exclude,E1.9,
" Shi E., Et al., Cast: Enhancing code summarization with hierarchical splitting and reconstruction of abstract syntax trees, (2021)",https://www.google.com/search?q=cast: enhancing code summarization with hierarchical splitting and reconstruction of abstract syntax trees,sb-006,Include,,
" Sparks S., Embleton S., Cunningham R., Zou C.C., Automated vulnerability analysis: Leveraging control flow for evolutionary input crafting, 23rd Annual Computer Security Applications Conference (ACSAC 2007), December 10-14, 2007, Miami Beach, Florida, USA, pp. 477-486, (2007)",https://www.google.com/search?q=automated vulnerability analysis: leveraging control flow for evolutionary input crafting,sb-008,Exclude,E1.3,
" Yan J., Sun H., Wang X., Liu X., Song X., Profiling Developer Expertise Across Software Communities With Heterogeneous Information Network Analysis, Proceedings of the Tenth Asia-Pacific Symposium on Internetware, pp. 1-9, (2018)",https://www.google.com/search?q=profiling developer expertise across software communities with heterogeneous information network analysis,sb-009,Include,"I1.1,I1.2",
" Liu S., Gao C., Chen S., Lun Yiu N., Liu Y., Atom: Commit message generation based on abstract syntax tree and hybrid ranking, IEEE Transactions on Software Engineering, (2020)",https://www.google.com/search?q=atom: commit message generation based on abstract syntax tree and hybrid ranking,sb-010,Include,,
" Wan Y., Zhao Z., Yang M., Xu G., Ying H., Wu J., Yu P.S., Improving automatic source code summarization via deep reinforcement learning, Ase, pp. 397-407, (2018)",https://www.google.com/search?q=improving automatic source code summarization via deep reinforcement learning,sb-011,Include,,
" Lin C., Ouyang Z., Zhuang J., Chen J., Li H., Wu R., Improving code summarization with block-wise abstract syntax tree splitting, 2021 IEEE/ACM 29th International Conference on Program Comprehension, pp. 184-195, (2021)",https://www.google.com/search?q=improving code summarization with block-wise abstract syntax tree splitting,sb-012,Include,,
" Lyu C., Wang R., Zhang H., Zhang H., Hu S., Embedding API dependency graph for neural code generation, Empirical Softw. Eng., 26, 4, pp. 1-51, (2021)",https://www.google.com/search?q=embedding api dependency graph for neural code generation,sb-015,Include,,
" Habib A., Pradel M., Is this class thread-safe? Inferring documentation using graph-based learning, ASE, pp. 41-52, (2018)",https://www.google.com/search?q=is this class thread-safe? inferring documentation using graph-based learning,sb-018,Include,"I1.1,I1.2",
" Yin P., Neubig G., Allamanis M., Brockschmidt M., Gaunt A.L., Learning to Represent Edits, International Conference on Learning Representations, (2019)",https://www.google.com/search?q=learning to represent edits,sb-019,Include,,
" Tang Z., Shen X., Li C., Ge J., Huang L., Zhu Z., Luo B., AST-trans: Code summarization with efficient tree-structured attention, 44th IEEE/ACM 44th International Conference on Software Engineering, ICSE 2022, pp. 150-162, (2022)",https://www.google.com/search?q=ast-trans: code summarization with efficient tree-structured attention,sb-020,Include,,
" Weimer W., Necula G.C., Mining temporal specifications for error detection, TACAS, pp. 461-476, (2005)",https://www.google.com/search?q=mining temporal specifications for error detection,sb-021,Exclude,E1.1,
" Zhang Y., Fan Y., Hou S., Ye Y., Xiao X., Li P., Shi C., Zhao L., Xu S., Cyber-Guided Deep Neural Network For Malicious Repository Detection In Github, 2020 IEEE International Conference on Knowledge Graph (ICKG), pp. 458-465, (2020)",https://www.google.com/search?q=cyber-guided deep neural network for malicious repository detection in github,sb-022,Include,,
" Alon U., Zilberstein M., Levy O., A general path-based representation for predicting program properties., (2018)",https://www.google.com/search?q=a general path-based representation for predicting program properties.,sb-023,Include,,
" Liang H., Yang Y., Sun L., Jiang L., JSAC: a novel framework to detect malicious javascript via CNNs over AST and CFG, 2019 International Joint Conference on Neural Networks (IJCNN), pp. 1-8, (2019)",https://www.google.com/search?q=jsac: a novel framework to detect malicious javascript via cnns over ast and cfg,sb-025,Include,I1.1,
" Ghaffarian S.M., Shahriari H.R., Neural software vulnerability analysis using rich intermediate graph representations of programs, Information Sciences, 553, pp. 189-207, (2021)",https://www.google.com/search?q=neural software vulnerability analysis using rich intermediate graph representations of programs,sb-026,Include,I1.1,
" Zaidman A., Demeyer S., Automatic identification of key classes in a software system using webmining techniques, J. Softw. Maintenance Res. Pract., 20, 6, pp. 387-417, (2008)",https://www.google.com/search?q=automatic identification of key classes in a software system using webmining techniques,sb-027,Exclude,"E1.1,E1.3",
" Romanov V., Ivanov V., Succi G., Representing programs with dependency and function call graphs for learning hierarchical embeddings, ICEIS, 2, pp. 360-366, (2020)",https://www.google.com/search?q=representing programs with dependency and function call graphs for learning hierarchical embeddings,sb-028,Exclude,E1.1,
" Control flow graph embedding based on multi-instance decomposition for bug localization, Proceedings of the 34Th AAAI Conference on Artificial Intelligence, Volume 34, pp. 4223-4230, (2020)",https://www.google.com/search?q=control flow graph embedding based on multi-instance decomposition for bug localization,sb-165,Include,I1.1,
" Liu F., Li G., Wei B., Xia X., Fu Z., Jin Z., A self-attentional neural architecture for code completion with multi-task learning, Proc. 28th Int. Conf. Prog. Comprehension, pp. 37-47, (2020)",https://www.google.com/search?q=a self-attentional neural architecture for code completion with multi-task learning,sb-030,Include,I1.1,
" Cvitkovic M., Singh B., Anandkumar A., Deep learning on code with an unbounded vocabulary, CAV, (2018)",https://www.google.com/search?q=deep learning on code with an unbounded vocabulary,sb-031,Include,I1.1,
" Cheng X., Wang H., Hua J., Zhang M., Xu G., Yi L., Sui Y., Static detection of control-flow-related vulnerabilities using graph embedding, 2019 24th International Conference on Engineering of Complex Computer Systems (ICECCS’19), pp. 41-50, (2019)",https://www.google.com/search?q=static detection of control-flow-related vulnerabilities using graph embedding,sb-034,Include,I1.1,
" Mou L., Li G., Zhang L., Wang T., Jin Z., Convolutional Neural Networks over Tree Structures for Programming Language Processing, Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence, pp. 1287-1293, (2016)",https://www.google.com/search?q=convolutional neural networks over tree structures for programming language processing,sb-035,Include,I1.1,
" Tarlow D., Moitra S., Rice A., Chen Z., Manzagol P., Sutton C., Aftandilian E., Learning to fix build errors with graph2diff neural networks, ICSE '20: 42nd International Conference on Software Engineering, pp. 19-20, (2020)",https://www.google.com/search?q=learning to fix build errors with graph2diff neural networks,sb-036,Exclude,E1.8,
" Hu X., Li G., Xia X., Lo D., Jin Z., Deep code comment generation with hybrid lexical and syntactical information, Empir. Softw. Eng., 25, 3, pp. 2179-2217, (2020)",https://www.google.com/search?q=deep code comment generation with hybrid lexical and syntactical information,sb-037,Include,I1.1,
" Li J., Wang Y., Lyu M.R., King I., Code completion with neural attention and pointer networks, Proceedings of the twenty-seventh international joint conference on artificial intelligence, IJCAI, pp. 4159-4165, (2018)",https://www.google.com/search?q=code completion with neural attention and pointer networks,sb-038,Include,,
" Chakraborty S., Ding Y., Allamanis M., Ray B., CODIT: Code editing with treebased neural models, IEEE Transactions on Software Engineering, (2020)",https://www.google.com/search?q=codit: code editing with treebased neural models,sb-040,Include,I1.1,
" Utture A., Liu S., Kalhauge C.G., Palsberg J., Striking a balance: pruning false-positives from static call graphs, Proceedings of the 44Th International Conference on Software Engineering (ICSE ’22), pp. 2043-2055, (2022)",https://www.google.com/search?q=striking a balance: pruning false-positives from static call graphs,sb-041,Exclude,E1.3,
" Chen X., Liu C., Song D., Tree-to-tree neural networks for program translation, NIPS'18 Proceedings of the 32nd International Conference on Neural Information Processing Systems, 31, pp. 2552-2562, (2018)",https://www.google.com/search?q=tree-to-tree neural networks for program translation,sb-042,Include,I1.1,
" Xiaomeng W., Tao Z., Runpu W., Wei X., Changyu H., Cpgva: Code property graph based vulnerability analysis by deep learning, 2018 10th International Conference on Advanced Infocomm Technology (ICAIT), pp. 184-188, (2018)",https://www.google.com/search?q=cpgva: code property graph based vulnerability analysis by deep learning,sb-046,Exclude,E2.6,
" Pan W., Ming H., Chang C.K., Yang Z., Kim D., ElementRank: Ranking Java software classes and packages using a multilayer complex network-based approach, IEEE Trans. Softw. Eng., 47, 10, pp. 2272-2295, (2021)",https://www.google.com/search?q=elementrank: ranking java software classes and packages using a multilayer complex network-based approach,sb-047,Include,"I1.1,I1.2",
" Zanoni M., Fontana F.A., Stella F., On applying machine learning techniques for design pattern detection, J. Syst. Softw., 103, pp. 102-117, (2015)",https://www.google.com/search?q=on applying machine learning techniques for design pattern detection,sb-049,Exclude,E1.1,
" Lazarine B., Samtani S., Patton M., Zhu H., Ullman S., Ampel B., Chen H., Identifying Vulnerable Github Repositories And Users In Scientific Cyberinfrastructure: An Unsupervised Graph Embedding Approach, 2020 IEEE International Conference on Intelligence and Security Informatics (ISI), pp. 1-6, (2020)",https://www.google.com/search?q=identifying vulnerable github repositories and users in scientific cyberinfrastructure: an unsupervised graph embedding approach,sb-050,Include,"I1.1,I1.2",
" Cummins C., Fisches Z.V., Ben-Nun T., Hoefler T., Leather H., ProGraML: Graph-based Deep Learning for Program Optimization and Analysis, (2020)",https://www.google.com/search?q=programl: graph-based deep learning for program optimization and analysis,sb-051,Exclude,E1.5,
" Yao Z., Xu F.F., Yin P., Sun H., Neubig G., Learning structural edits via incremental tree transformations, 9Th International Conference on Learning Representations, ICLR 2021, Virtual Event, Austria, May 3–7, 2021, Openreview.Net, (2021)",https://www.google.com/search?q=learning structural edits via incremental tree transformations,sb-055,Include,,
" Liu F., Zhang L., Jin Z., Modeling programs hierarchically with stack-augmented lstm, Journal of Systems and Software, 164, (2020)",https://www.google.com/search?q=modeling programs hierarchically with stack-augmented lstm,sb-057,Include,I1.1,
" Gupta R., Kanade A., Shevade S., Neural attribution for semantic bug-localization in student programs, NeurIPS, (2019)",https://www.google.com/search?q=neural attribution for semantic bug-localization in student programs,sb-060,Include,I1.1,
" Liang H., Sun L., Wang M., Yang Y., Deep learning with customized abstract syntax tree for bug localization, IEEE Access, 7, pp. 116309-116320, (2019)",https://www.google.com/search?q=deep learning with customized abstract syntax tree for bug localization,sb-061,Include,I1.1,
" Zhang J., Xie R., Ye W., Zhang Y., Zhang S., Exploiting code knowledge graph for bug localization via bi-directional attention, pp. 219-229, (2020)",https://www.google.com/search?q=exploiting code knowledge graph for bug localization via bi-directional attention,sb-062,Include,I1.1,
" Zhu Z., Li Y., Tong H., Wang Y., COOBA: Cross-project bug localization via adversarial transfer learning, pp. 3565-3571, (2020)",https://www.google.com/search?q=cooba: cross-project bug localization via adversarial transfer learning,sb-063,Include,I1.1,
" Zhong H., Mei H., Learning a graph-based classifier for fault localization, Science China Information Sciences, 63, (2020)",https://www.google.com/search?q=learning a graph-based classifier for fault localization,sb-065,Include,I1.1,
" Wang Z., Zheng Q., Sun Y., GVD-net: graph embedding-based machine learning model for smart contract vulnerability detection. Proceedings of the 2022 International Conference on Algorithms, Data Mining, and Information Technology",https://www.google.com/search?q=gvd-net: graph embedding-based machine learning model for smart contract vulnerability detection. proceedings of the 2022 international conference on algorithms,sb-066,Exclude,E3.3,
" Buch L., Andrzejak A., Learning-based recursive aggregation of abstract syntax trees for code clone detection. Proceedings of the 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering",https://www.google.com/search?q=learning-based recursive aggregation of abstract syntax trees for code clone detection. proceedings of the 2019 ieee 26th international conference on software analysis,sb-067,Include,I1.1,
" Bowman B., Huang H.H., VGRAPH: a robust vulnerable code clone detection system using code property triplets. Proceedings of the 2020 IEEE European Symposium on Security and Privacy",https://www.google.com/search?q=vgraph: a robust vulnerable code clone detection system using code property triplets. proceedings of the 2020 ieee european symposium on security and privacy,sb-068,Exclude,E1.1,
" Cheng X., Wang H., Hua J., Et al., Static detection of control-flow-related vulnerabilities using graph embedding. Proceedings of the 2019 24th International Conference on Engineering of Complex Computer Systems (ICECCS)",https://www.google.com/search?q=static detection of control-flow-related vulnerabilities using graph embedding. proceedings of the 2019 24th international conference on engineering of complex computer systems (iceccs),sb-069,Duplicate,,
" Li Z., Li H., Peter Chen T., Shang W., 2021 DeepLV: Suggesting Log Levels Using Ordinal Based Neural Networks, 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE). 1461-1472",https://www.google.com/search?q=2021 deeplv: suggesting log levels using ordinal based neural networks,sb-070,Exclude,E1.1,
" DeFreez D., Thakur A.V., Rubio-Gonzalez C., Path-based function embedding and its application to error-handling specification mining, ESEC/FSE, pp. 423-433, (2018)",https://www.google.com/search?q=path-based function embedding and its application to error-handling specification mining,sb-071,Include,"I1.1,I1.2",
" Kang H. J., Lo D., Active learning of discriminative subgraph patterns for api misuse detection, IEEE Transactions on Software Engineering, (2021)",https://www.google.com/search?q=active learning of discriminative subgraph patterns for api misuse detection,sb-072,Include,"I1.1,I1.2",
" Chen C., Et al., Generative API usage code recommendation with parameter concretization, SCIENCE CHINA Inf. Sci., 62, 9, pp. 1921031-19210322, (2019)",https://www.google.com/search?q=generative api usage code recommendation with parameter concretization,sb-073,Include,,
" Ling C., Zou Y., Xie B., Graph neural network based collaborative filtering for api usage recommendation, Proceedings of the 2021 IEEE International Conference on Software Analysis, Evolution and Reengineering, pp. 36-47, (2021)",https://www.google.com/search?q=graph neural network based collaborative filtering for api usage recommendation,sb-074,Include,"I1.1,I1.2",
" Wang Y., Li H., Code Completion by Modeling Flattened Abstract Syntax Trees as Graphs. Arxiv Preprint Arxiv, 2103, (2021)",https://www.google.com/search?q=code completion by modeling flattened abstract syntax trees as graphs. arxiv preprint arxiv,sb-075,Include,,
" Mehrotra N., Agarwal N., Gupta P., Anand S., Lo D., Purandare R., Modeling Functional Similarity in Source Code with Graph-Based Siamese Networks. Arxiv Preprint Arxiv, 2011, (2020)",https://www.google.com/search?q=modeling functional similarity in source code with graph-based siamese networks. arxiv preprint arxiv,sb-076,Duplicate,,
" Bui Q.N.D., Yu Y., Jiang L., TreeCaps: Tree-Based Capsule Networks for Source Code Processing, Thirty-Fifth AAAI Conference on Artificial Intelligence, AAAI 2021, Thirty-Third Conference on Innovative Applications of Artificial Intelligence, IAAI 2021, The Eleventh Symposium on Educational Advances in Artificial Intelligence, EAAI 2021, pp. 30-38, (2021)",https://www.google.com/search?q=treecaps: tree-based capsule networks for source code processing,sb-081,Include,I1.1,
" Hua W., Sui Y., Wan Y., Liu G., Xu G., FCCA: Hybrid code representation for functional clone detection using attention networks, IEEE Trans. Reliabil., 70, pp. 304-318, (2020)",https://www.google.com/search?q=fcca: hybrid code representation for functional clone detection using attention networks,sb-082,Include,I1.1,
" White M., Tufano M., Vendome C., Poshyvanyk D., Deep learning code fragments for code clone detection, ASE, (2016)",https://www.google.com/search?q=deep learning code fragments for code clone detection,sb-083,Include,,
" Zeng J., Ben K., Li X., Zhang X., Fast code clone detection based on weighted recursive autoencoders, IEEE Access, 7, pp. 125062-125078, (2019)",https://www.google.com/search?q=fast code clone detection based on weighted recursive autoencoders,sb-084,Include,I1.1,
" Yu H., Lam W., Chen L., Li G., Xie T., Wang Q., Neural detection of semantic code clones via tree-based convolution, Proceedings of the 27th International Conference on Program Comprehension, pp. 70-80, (2019)",https://www.google.com/search?q=neural detection of semantic code clones via tree-based convolution,sb-085,Include,I1.1,
" Fang C., Liu Z., Shi Y., Huang J., Shi Q., Functional code clone detection with syntax and semantics fusion learning, pp. 516-527, (2020)",https://www.google.com/search?q=functional code clone detection with syntax and semantics fusion learning,sb-086,Include,"I1.1,I1.2",
" Wei H., Li M., Supervised deep features for software functional clone detection by exploiting lexical and syntactical information in source code, IJCAI, pp. 3034-3040, (2017)",https://www.google.com/search?q=supervised deep features for software functional clone detection by exploiting lexical and syntactical information in source code,sb-087,Include,I1.1,
" Nafi K.W., Kar T.S., Roy B., Roy C.K., Schneider K.A., Cross language code clone detection using syntactical features and API documentation, Proceedings - 2019 34Th IEEE/ACM International Conference on Automated Software Engineering, pp. 1026-1037, (2019)",https://www.google.com/search?q=cross language code clone detection using syntactical features and api documentation,sb-089,Exclude,E1.1,
" Ullah F., Jabbar S., Al-Turjman F., Programmers' de-anonymization using a hybrid approach of abstract syntax tree and deep learning, Tech-nol. Forecasting Social Change, 159, (2020)",https://www.google.com/search?q=programmers' de-anonymization using a hybrid approach of abstract syntax tree and deep learning,sb-090,Exclude,E1.1/E3.3,
" Zhang J., Wang X., Zhang H., Sun H., Wang K., Liu X., A novel neural source code representation based on abstract syntax tree, Proceedings of the 41st International Conference on Software Engineering, ICSE 2019, pp. 783-794, (2019)",https://www.google.com/search?q=a novel neural source code representation based on abstract syntax tree,sb-091,Include,I1.1,
" Tufano M., Watson C., Bavota G., Di Penta M., White M., Poshyvanyk D., Deep learning similarities from different representations of source code, MSR, (2018)",https://www.google.com/search?q=deep learning similarities from different representations of source code,sb-092,Include,,
" Gu W., Et al., CRaDLe: Deep code retrieval based on semantic dependency learning, Neural Netw, 141, pp. 385-394, (2021)",https://www.google.com/search?q=cradle: deep code retrieval based on semantic dependency learning,sb-093,Include,,
" Zhao G., Huang J., Deepsim: deep learning code functional similarity, pp. 141-151, (2018)",https://www.google.com/search?q=deepsim: deep learning code functional similarity,sb-094,Include,I1.1,
" Bui N.D.Q., Yu Y., Jiang L., 2021 Self-Supervised Contrastive Learning for Code Retrieval and Summarization via Semantic-Preserving Transformations, Proceedings of the 44th International ACM SIGIR Conference on Research and Development in Information Retrieval (SIGIR ?21). ACM, pp. 511-521",https://www.google.com/search?q=2021 self-supervised contrastive learning for code retrieval and summarization via semantic-preserving transformations,sb-097,Exclude,E1.3,I think this is just data augmentation
" Bui N.D.Q., Yu Y., Jiang L., Bilateral dependency neural networks for cross-language algorithm classification, 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, pp. 422-433, (2019)",https://www.google.com/search?q=bilateral dependency neural networks for cross-language algorithm classification,sb-098,Include,I1.1,
" Liu S., A Unified Framework to Learn Program Semantics with Graph Neural Networks, 2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE, (2020)",https://www.google.com/search?q=a unified framework to learn program semantics with graph neural networks,sb-099,Include,I1.1,
" Lacomis J., Yin P., Schwartz E., Allamanis M., Le Goues C., Neubig G., Vasilescu B., Dire: A Neural Approach to Decompiled Identifier Naming, pp. 628-639, (2019)",https://www.google.com/search?q=dire: a neural approach to decompiled identifier naming,sb-101,Exclude,E1.3,
" Dinella E., Dai H., Li Z., Naik M., Song L., Wang K., Hoppity: Learning Graph Transformations to Detect and Fix Bugs in Programs, International Conference on Learning Representations, (2020)",https://www.google.com/search?q=hoppity: learning graph transformations to detect and fix bugs in programs,sb-102,Include,I1.1,
" Xu S., Zhang S., Wang W., Cao X., Guo C., Xu J., Method name suggestion with hierarchical attention networks, Proceedings of the 2019 Acm Sigplan Workshop on Partial Evaluation and Program Manipulation, Acm, pp. 10-21, (2019)",https://www.google.com/search?q=method name suggestion with hierarchical attention networks,sb-103,Exclude,E1.1,
" Meneely A., Williams L., Snipes W., Osborne J., Predicting failures with developer networks and social network analysis, Proceedings of the 16th ACM SIGSOFT International Symposium On Foundations of Software Engineering, pp. 13-23, (2008)",https://www.google.com/search?q=predicting failures with developer networks and social network analysis,sb-106,Include,I1.1,
" Bird C., Nagappan N., Gall H., Murphy B., Devanbu P., Putting it all together: Using socio-technical networks to predict failures, 2009 20th International Symposium On Software Reliability Engineering, pp. 109-119, (2009)",https://www.google.com/search?q=putting it all together: using socio-technical networks to predict failures,sb-107,Include,I1.1,
" Chen L., Ma W., Zhou Y., Xu L., Wang Z., Chen Z., Xu B., Empirical analysis of network measures for predicting high severity software faults, Sci. China Inf. Sci., 59, 12, pp. 1-18, (2016)",https://www.google.com/search?q=empirical analysis of network measures for predicting high severity software faults,sb-169,Include,I1.1,
" Ma W., Chen L., Yang Y., Zhou Y., Xu B., Empirical analysis of network measures for effort-aware fault-proneness prediction, Inf. Softw. Technol., 69, pp. 50-70, (2016)",https://www.google.com/search?q=empirical analysis of network measures for effort-aware fault-proneness prediction,sb-108,Exclude,E3.4,
" Li Y., Wong W.E., Lee S.Y., Wotawa F., Using tri-relation networks for effective software fault-proneness prediction, Ieee Access, 7, pp. 63066-63080, (2019)",https://www.google.com/search?q=using tri-relation networks for effective software fault-proneness prediction,sb-109,Include,I1.1,
" Zimmermann T., Nagappan N., Predicting defects using network analysis on dependency graphs, Proceedings of the 30th International Conference On Software Engineering, pp. 531-540, (2008)",https://www.google.com/search?q=predicting defects using network analysis on dependency graphs,sb-110,Exclude,E1.4,
" Faruk Rokon O., Yan P., Islam R., Faloutsos M., Repo2vec: A comprehensive embedding approach for determining repository similarity, ICSME, (2021)",https://www.google.com/search?q=repo2vec: a comprehensive embedding approach for determining repository similarity,sb-112,Exclude,E1.9,
"Alon U., Zilberstein M., Levy O., Yahav E., 2019. Code2vec: Learning Distributed Representations of Code, 3, (2019)",https://www.google.com/search?q=2019. code2vec: learning distributed representations of code,sb-114,Include,I1.1,
" Cabrera Lozoya R., Baumann A., Sabetta A., Bezzi M., Commit2vec: Learning distributed representations of code changes, SN Computer Science, 2, 3, pp. 1-16, (2021)",https://www.google.com/search?q=commit2vec: learning distributed representations of code changes,sb-115,Include,I1.1,
" Ben-Nun T., Jakobovits A. S., Hoefler T., Neural code comprehension: a learnable representation of code semantics, Advances in Neural Information Processing Systems, pp. 3585-3597, (2018)",https://www.google.com/search?q=neural code comprehension: a learnable representation of code semantics,sb-116,Include,,
" Brody S., Alon U., Yahav E., A structural model for contextual code changes, Proceedings of the ACM on Programming Languages, 4, pp. 1-28, (2020)",https://www.google.com/search?q=a structural model for contextual code changes,sb-117,Include,I1.1,
" Hellendoorn V.J., Sutton C., Singh R., Maniatis P., Bieber D., Global relational models of source code, International Conference on Learning Representations, (2020)",https://www.google.com/search?q=global relational models of source code,sb-118,Include,"I1.1,I1.2",
" Zhang L., Rosenblatt G., Fetaya E., Liao R., Byrd W., Might M., Urtasun R., Zemel R., Neural guided constraint logic programming for program synthesis, Adv Neural Inf Process Syst, (2018)",https://www.google.com/search?q=neural guided constraint logic programming for program synthesis,sb-119,Exclude,E1.9,
" Guo D., Ren S., Lu S., Feng Z., Tang D., Liu S., Zhou L., Duan N., Svyatkovskiy A., Fu S., Et al., Graphcodebert: Pre-training code representations with data-ow, (2020)",https://www.google.com/search?q=graphcodebert: pre-training code representations with data-ow,sb-170,Include,I1.1,
" Jiang X., Zheng Z., Lyu C., Li L., Lyu L., Treebert: A tree-based pre-trained model for programming language, UAI 2021: Uncertainty in Artificial Intelligence, (2021)",https://www.google.com/search?q=treebert: a tree-based pre-trained model for programming language,sb-171,Include,I1.1,
" Bui N.D.Q., Yu Y., Jiang L., InferCode: Self-Supervised Learning of Code Representations by Predicting Subtrees, 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)., pp. 1186-1197, (2021)",https://www.google.com/search?q=infercode: self-supervised learning of code representations by predicting subtrees,sb-121,Include,I1.1,
" Vagavolu D., Swarna K. C., Chimalakonda S., A mocktail of source code representations, ASE, (2021)",https://www.google.com/search?q=a mocktail of source code representations,sb-122,Include,I1.1,
" Chen D., Chen X., Li H., Xie J., Mu Y., Deepcpdp: Deep learning based cross-project defect prediction, Ieee Access, 7, pp. 184832-184848, (2019)",https://www.google.com/search?q=deepcpdp: deep learning based cross-project defect prediction,sb-127,Include,I1.1,
" Zeng C., Zhou C.Y., Lv S.K., He P., Huang J., GCN2defect: Graph Convolutional Networks for SMOTETomek-based Software Defect Prediction, pp. 69-79, (2021)",https://www.google.com/search?q=gcn2defect: graph convolutional networks for smotetomek-based software defect prediction,sb-128,Include,I1.1,
" Li J., He P., Zhu J., Lyu M.R., Software defect prediction via convolutional neural network, 2017 IEEE International Conference on Software Quality, Reliability and Security (QRS), pp. 318-328, (2017)",https://www.google.com/search?q=software defect prediction via convolutional neural network,n/a,Paper Not Available,,
" Xu J., Wang F., Ai J., Defect prediction with semantics and context features of codes based on graph representation learning, Ieee Trans. Reliab, pp. 1-13, (2020)",https://www.google.com/search?q=defect prediction with semantics and context features of codes based on graph representation learning,sb-132,Include,I1.1,
" Tian J., Tian Y., A model based on program slice and deep learning for software defect prediction, Proc.-Int. Conf. Comput. Commun. Networks, Icccn, pp. 2-7, (2020)",https://www.google.com/search?q=a model based on program slice and deep learning for software defect prediction,sb-133,Exclude,E1.1,
" Cai Z., Lu L., Qiu S., An abstract syntax tree encoding method for cross-project defect prediction, Ieee Access, 7, pp. 170844-170853, (2019)",https://www.google.com/search?q=an abstract syntax tree encoding method for cross-project defect prediction,sb-134,Include,I1.1,
" Yang Y., Ai J., Wang F., Defect prediction based on the characteristics of multilayer structure of software network, 2018 Ieee International Conference on Software Quality, Reliability and Security Companion (QRS-C), pp. 27-34, (2018)",https://www.google.com/search?q=defect prediction based on the characteristics of multilayer structure of software network,sb-135,Include,I1.1,
" Shippey T., Bowes D., Hall T., Automatically identifying code features for software defect prediction: Using AST N-grams, Inf. Softw. Technol., 106, pp. 142-160, (2019)",https://www.google.com/search?q=automatically identifying code features for software defect prediction: using ast n-grams,sb-136,Include,I1.1,
" Zhang Y., Jin D., Xing Y., Gong Y., Automated defect identification via path analysis-based features with transfer learning, The Journal of Systems & Software, 166, (2020)",https://www.google.com/search?q=automated defect identification via path analysis-based features with transfer learning,sb-137,Exclude,E.1,"I don't feel this is really graph learning, as the same could have been done without a graph"
" Meilong S., He P., Xiao H., Li H., Zeng C., An approach to semantic and structural features learning for software defect prediction, Math. Problems Eng., 2020, (2020)",https://www.google.com/search?q=an approach to semantic and structural features learning for software defect prediction,sb-138,Include,I1.1,
" Wang H., Zhuang W., Zhang X., Software Defect Prediction Based on Gated Hierarchical LSTMs, IEEE Transactions on Reliability, 70, 2, pp. 711-727, (2021)",https://www.google.com/search?q=software defect prediction based on gated hierarchical lstms,sb-139,Include,I1.1,
" Nguyen V. H., Tran L. M. S., Predicting vulnerable software components with dependency graphs, Proceedings of the 6th International Workshop on Security Measurements and Metrics, ser. MetriSec'10, pp. 31-38, (2010)",https://www.google.com/search?q=predicting vulnerable software components with dependency graphs,sb-140,Include,I1.1,
" Qu Y., Liu T., Chi J., Jin Y., Cui D., He A., Zheng Q., node2defect: Using network embedding to improve software defect prediction, 2018 33rd IEEE/ACM International Conference on Automated Software Engineering, ASE, pp. 844-849, (2018)",https://www.google.com/search?q=node2defect: using network embedding to improve software defect prediction,sb-142,Include,I1.1,
" Pan C., Lu M., Xu B., Gao H., An improved CNN model for withinproject software defect prediction, Appl. Sci., 9, 10, (2019)",https://www.google.com/search?q=an improved cnn model for withinproject software defect prediction,sb-143,Include,I1.1,
" Li M., Li C., Li S., Wu Y., Zhang B., Wen Y., ACGVD: Vulnerability detection based on comprehensive graph via graph neural network with attention, International Conference on Information and Communications Security, pp. 243-259, (2021)",https://www.google.com/search?q=acgvd: vulnerability detection based on comprehensive graph via graph neural network with attention,sb-145,Include,I1.1,
" Wu H., Zhang Z., Wang S., Lei Y., Lin B., Qin Y., Zhang H., Mao X., Peculiar: Smart contract vulnerability detection based on crucial data flow graph and pre-Training techniques, 2021 IEEE 32nd International Symposium on Software Reliability Engineering (ISSRE). IEEE, pp. 378-389, (2021)",https://www.google.com/search?q=peculiar: smart contract vulnerability detection based on crucial data flow graph and pre-training techniques,sb-146,Include,I1.1,
" Kronjee J., Hommersom A., Vranken H., Discovering software vulnerabilities using data-flow analysis and machine learning, Proceedings of The 13th International Conference on Availability, Reliability and Security, Ser. ARES 2018, (2018)",https://www.google.com/search?q=discovering software vulnerabilities using data-flow analysis and machine learning,sb-147,Exclude,E1.1,
" Li Z., Zou D., Xu S., Jin H., Zhu Y., Chen Z., SySeVR: A framework for using deep learning to detect software vulnerabilities, IEEE Trans. Dependable Secure Comput., (2021)",https://www.google.com/search?q=sysevr: a framework for using deep learning to detect software vulnerabilities,sb-148,Exclude,E1.1,
" Zhou L., Huang M., Li Y., Et al., GraphEye: A Novel Solution for Detecting Vulnerable Functions Based on Graph Attention Network [C], 2021 IEEE Sixth International Conference on Data Science in Cyberspace (DSC). IEEE, pp. 381-388, (2021)",https://www.google.com/search?q=grapheye: a novel solution for detecting vulnerable functions based on graph attention network [c],sb-149,Include,I1.1,
" Duan X., Wu J., Ji S., Rui Z., Luo T., Yang M., Wu Y., Vulsniper: Focus your attention to shoot fine-grained vulnerabilities., IJCAI, pp. 4665-4671, (2019)",https://www.google.com/search?q=vulsniper: focus your attention to shoot fine-grained vulnerabilities.,sb-151,Include,I1.1,
" Bilgin Z., Ersoy M.A., Soykan E.U., Tomur E., Comak P., Karacay L., Vulnerability prediction from source code using machine learning, IEEE Access, 8, pp. 150672-150684, (2020)",https://www.google.com/search?q=vulnerability prediction from source code using machine learning,sb-154,Include,I1.1,
" Liu Z., Qian P., Wang X., Zhu L., He Q., Ji S., Smart contract vulnerability detection: From pure neural network to interpretable graph feature and expert pattern fusion, (2021)",https://www.google.com/search?q=smart contract vulnerability detection: from pure neural network to interpretable graph feature and expert pattern fusion,sb-158,Exclude,E1.10,
" Zhuang Y., Liu Z., Qian P., Liu Q., Wang X., He Q., Smart contract vulnerability detection using graph neural network, Proceedings of the Twenty-Ninth International Joint Conference on Artificial Intelligence, IJCAI 2020, pp. 3283-3290, (2020)",https://www.google.com/search?q=smart contract vulnerability detection using graph neural network,sb-159,Exclude,E1.10,
" Ban X., Liu S., Chen C., Chua C., A performance evaluation of deep-learnt features for software vulnerability detection, Concurrency Comput., Practice Experience, 31, (2019)",https://www.google.com/search?q=a performance evaluation of deep-learnt features for software vulnerability detection,sb-160,Include,I1.1,
" Zhu Q., Sun Z., Xiao Y., Zhang W., Yuan K., Xiong Y., Zhang L., A syntax-guided edit decoder for neural program repair, Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering., pp. 341-353, (2021)",https://www.google.com/search?q=a syntax-guided edit decoder for neural program repair,sb-161,Include,,
" White M., Tufano M., Martinez M., Monperrus M., Poshyvanyk D., Sorting and transforming program repair ingredients via deep learning code similarities, Proceedings of the 26th IEEE International Conference on Software Analysis, Evolution and Reengineering, pp. 479-490, (2019)",https://www.google.com/search?q=sorting and transforming program repair ingredients via deep learning code similarities,sb-163,Exclude,E1.1,
" Li Y., Wang S., Nguyen T.N., DEAR: A novel deep learning-based approach for automated program repair, International Conference on Software Engineering. ACM, pp. 511-523, (2022)",https://www.google.com/search?q=dear: a novel deep learning-based approach for automated program repair,sb-164,Include,I1.1,
" Wei B., Li Y., Li G., Xia X., Jin Z., Retrieve and refine: Exemplarbased neural comment generation, Proc. IEEE/ACM 35th Int. Conf. Automated Softw. Eng, pp. 349-360, (2020) ",,sb-166,Exclude,E1.1,
" Wu H., Zhao H., Zhang M., Code summarization with structure-induced transformer, Findings of the Association for Computational Linguistics: ACL-IJCNLP 2021, pp. 1078-1090, (2021)",,sb-167,Include,I1.1,
" LeClair A., Jiang S., McMillan C., A neural model for generating natural language summaries of program subroutines, Icse, pp. 795-806, (2019)",,sb-168,Include,I1.1,
" Zhou Z., Yu H., Fan G., Huang Z., Yang X., Summarizing source code with hierarchical code representation, Inf. Softw. Technol., 143, (2022)",,sb-172,Include,I1.1,
" Gong Z., Gao C., Wang Y., Gu W., Peng Y., Xu Z., Source code summarization with structural relative position guided transformer, (2022)",,sb-173,Include,I1.1,
" Zhou W., Junhua W., Code comments generation with data flow-guided transformer, Web Information Systems and Applications: 19Th International Conference, WISA 2022, Dalian, China, September 16–18, 2022, Proceedings, pp. 168-180, (2022)",,sb-174,Include,I1.1,
" Wang Y., Dong Y., Lu X., Zhou A., Gypsum: Learning hybrid representations for code summarization, Proceedings of the 30th IEEE/ACM International Conference on Program Comprehension, pp. 12-23, (2022)",,sb-175,Include,I1.1,
" Yin P., Neubig G., A syntactic neural model for general-purpose code generation, Proc. 55th Annu. Meeting Assoc. Comput. Linguistics, pp. 440-450, (2017)",,sb-176,Exclude,E1.1,"Arguably very borderline, but the graph is never an _input_, nor as ""feedback"
" Choi Y.S., Bak J.Y., Na C.W., Lee J.H., Learning sequential and structural information for source code summarization, Findings of the Association for Computational Linguistics: ACL-IJCNLP 2021, pp. 2842-2851, (2021)",,sb-177,Include,I1.1,
" Peng H., Li G., Wang W., Zhao Y., Jin Z., Integrating tree path in transformer for code representation, Thirty-Fifth Conference on Neural Information Processing Systems, (2021)",,sb-178,Include,I1.1,
" Gao Y., Lyu C., M2ts: Multi-scale multi-modal approach based on transformer for source code summarization, Proceedings of the 30th IEEE/ACM International Conference on Program Comprehension, pp. 24-35, (2022)",,sb-179,Include,I1.1,
" Rabinovich M., Stern M., Klein D., Abstract Syntax Networks for Code Generation and Semantic Parsing, Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pp. 1139-1149, (2017)",,sb-180,Exclude,,"Arguably very borderline, but the graph is never an _input_, nor as ""feedback"""
" Zhou Z., Yu H., Fan G., Effective approaches to combining lexical and syntactical information for code summarization, Softw Pract Exp, 50, 12, pp. 2313-2336, (2020)",,sb-181,Include,I1.1,
" Sun Z., Zhu Q., Mou L., Xiong Y., Li G., Zhang L., A grammar- based structural CNN decoder for code generation, (2018)",,sb-182,Include,I1.1,
" Sun Z., Zhu Q., Xiong Y., Sun Y., Mou L., Zhang L., TreeGen: A tree-based transformer architecture for code generation, AAAI, (2020)",,sb-183,Include,,
" Shido Y., Kobayashi Y., Yamamoto A., Miyamoto A., Matsumura T., Automatic Source Code Summarization with Extended Treelstm, (2019)",,sb-184,Include,I1.1,
" Liu S., Chen Y., Xie X., Siow J., Liu Y., Automatic code summarization via multi-dimensional semantic fusing in GNN, CoRR, (2020)",,sb-185,Exclude,Arxiv,

