Title,Full Reference
cloudraid: hunting concurrency bugs in the cloud via log-mining,"Lu J., Li F., Li L., Feng X., Cloudraid: Hunting concurrency bugs in the cloud via log-mining, Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE). 3-14, (2018)"
binsim: trace-based semantic binary diffing via system call sliced segment equivalence checking,"Ming J., Xu D., Jiang Y., Wu D., BinSim: Trace-based semantic binary diffing via system call sliced segment equivalence checking, 26th Usenix Security Symposium (USENIX Security 17), pp. 253-270, (2017)"
antminer: mining more bugs by reducing noise interference,"Liang B., Bian P., Zhang Y., Shi W., You W., Cai Y., Antminer: Mining more bugs by reducing noise interference, 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE), pp. 333-344, (2016)"
samplefix: learning to correct programs by sampling diverse fixes,"Hajipour H., Bhattacharya A., Fritz M., Samplefix: Learning to correct programs by sampling diverse fixes, (2019)"
finding bugs is easy,"Hovemeyer D., Pugh W., Finding bugs is easy, OOPSLA, pp. 92-106, (2004)"
cnn-based automatic prioritization of bug reports[j],"Umer Q., Liu H., Illahi I., CNN-based automatic prioritization of bug reports[J], IEEE Trans. Reliab., 69, 4, pp. 1341-1354, (2019)"
understanding and detecting real-world performance bugs,"Jin G., Song L., Shi X., Scherpelz J., Lu S., Understanding and detecting real-world performance bugs, SIGPLAN Not., 47, 6, pp. 77-88, (2012)"
"mining behavior graphs for ""backtrace"" of noncrashing bugs","Liu C., Yan X., Yu H., Han J., Yu P. S., Mining behavior graphs for ""backtrace"" of noncrashing bugs, Proceedings of the 2005 SIAM international conference on data mining. SIAM, pp. 286-297, (2005)"
towards standardizing and improving classification of bug-fix commits,"Zafar S., Zubair Malik M., Singh Walia G., Towards standardizing and improving classification of bug-fix commits, 2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). IEEE, pp. 1-6, (2019)"
identification of security related bug reports via text mining using supervised and unsupervised classification,"Goseva-Popstojanova K., Tyo J., Identification of security related bug reports via text mining using supervised and unsupervised classification, 2018 Ieee International Conference on Software Quality, Reliability and Security (QRS), pp. 344-355, (2018)"
findbugs,"Findbugs, (2019)"
static detection of leaks in polymorphic containers,"Heine D.L., Lam M.S., Static detection of leaks in polymorphic containers, Proceedings of the 28th International Conference on Software Engineering (ICSEâ€™06), pp. 252-261, (2006)"
automated classification of overfitting patches with statically extracted code features,"Ye H., Gu J., Martinez M., Durieux T., Monperrus M., Automated classification of overfitting patches with statically extracted code features, IEEE Transactions on Software Engineering, (2021)"
uqbtng: a tool capable of automatically nding integer overows in win32 binaries,"Wojtczuk R., UQBTng: a tool capable of automatically nding integer overows in Win32 binaries, Proceedings of Chaos Communication Congress, (2005)"
pr-miner: automatically extracting implicit programming rules and detecting violations in large software code,"Li Z., Zhou Y., Pr-miner: automatically extracting implicit programming rules and detecting violations in large software code, ACM SIGSOFT Softw. Eng. Notes, 30, 5, pp. 306-315, (2005)"
discovre: efficient cross-architecture identification of bugs in binary code,"Eschweiler S., Yakdan K., Gerhards-Padilla E., discovre: Efficient cross-architecture identification of bugs in binary code, Network and Distributed System Security Symposium (NDSS), (2016)"
detecting bugs by discovering expectations and their violations,"Bian P., Liang B., Zhang Y., Yang C., Shi W., Cai Y., Detecting bugs by discovering expectations and their violations, IEEE Transactions on Software Engineering, 45, 10, pp. 984-1001, (2018)"
spotting working code examples,"Keivanloo I., Rilling J., Zou Y., Spotting working code examples, Proceedings of the 36th International Conference on Software Engineering, pp. 664-675, (2014)"
hermes: using commit-issue linking to detect vulnerability-fixing commits,"Nguyen-Truong G., Kang H.J., Lo D., Sharma A., Santosa A.E., Sharma A., Ang M.Y., Hermes: Using commit-issue linking to detect vulnerability-fixing commits, SANER, pp. 51-62, (2022)"
unsupervised deep bug report summarization,"Li X., Jiang H., Liu D., Ren Z., Li G., Unsupervised deep bug report summarization, pp. 144-155, (2018)"
bugfix: a learning-based tool to assist developers in fixing bugs,"Jeffrey D., Feng M., Gupta R., BugFix: A learning-based tool to assist developers in fixing bugs, 2009 IEEE 17th International Conference on Program Comprehension, pp. 70-79, (2009)"
narminer: discovering negative association rules from code for bug detection,"Bian P., Liang B., Shi W., Huang J., Cai Y., NARminer: discovering negative association rules from code for bug detection, Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, pp. 411-422, (2018)"
tracking down software bugs using automatic anomaly detection,"Hangal S., Lam M.S., Tracking down software bugs using automatic anomaly detection, Proceedings of the 24th International Conference on Software Engineering. ICSE 2002. IEEE, pp. 291-301, (2002)"
casms: combining clustering with attention semantic model for identifying security bug reports,"Ma X., Keung J., Yang Z., Yu X., Li Y., Zhang H., CASMS: Combining clustering with attention semantic model for identifying security bug reports, Inf. Softw. Technol., 147, (2022)"
bugs.jar: a large-scale,"Saha R., Lyu Y., Lam W., Yoshida H., Prasad M., Bugs.jar: A large-scale, diverse dataset of real-world Java bugs, Proceedings of the 15th IEEE/ACM International Conference on Mining Software Repositories. ACM, pp. 10-13, (2018)"
avatar: fixing semantic bugs with fix patterns of static analysis violations,"Liu K., Koyuncu A., Kim D., Bissyande T.F., AVATAR: Fixing semantic bugs with fix patterns of static analysis violations, Proceedings of the 26th IEEE International Conference on Software Analysis, Evolution and Reengineering. IEEE, pp. 456-467, (2019)"
utilizing source code embeddings to identify correct patches,"Csuvik V., Horvath D., Horvath F., Vidacs L., Utilizing source code embeddings to identify correct patches, Proceedings of the 2nd International Workshop on Intelligent Bug Fixing, pp. 18-25, (2020)"
dual analysis for recommending developers to resolve bugs,"Xia X., Lo D., Wang X., Zhou B., Dual analysis for recommending developers to resolve bugs, J. Softw. Evol. Process, 27, 3, pp. 195-220, (2015)"
bugram: bug detection with n-gram language models,"Wang S., Chollak D., Movshovitz-Attias D., Tan L., Bugram: Bug detection with n-gram language models, Proc. IEEE/ACM 31st Int. Conf. Automated Softw. Eng, pp. 708-719, (2016)"
static detection of asymptotic performance bugs in collection traversals,"Olivo O., Dillig I., Lin C., Static detection of asymptotic performance bugs in collection traversals, SIGPLAN Not., 50, 6, pp. 369-378, (2015)"
cp-miner: finding copy-paste and related bugs in large-scale software code,"Li Z., Lu S., Myagmar S., Zhou Y., Cp-miner: Finding copy-paste and related bugs in large-scale software code, IEEE Transactions on software Engineering, 32, 3, pp. 176-192, (2006)"
analyzing bug fix for automatic bug cause classification,"Ni Z., Li B., Sun X., Chen T., Tang B., Shi X., Analyzing bug fix for automatic bug cause classification, Journal of Systems and Software, 163, (2020)"
self-supervised bug detection and repair,"Allamanis M., Jackson-Flux H., Brockschmidt M., Self-Supervised Bug Detection and Repair, Advances in Neural Information Processing Systems 34: Annual Conference on Neural Information Processing Systems 2021, pp. 27865-27876, (2021)"
automated identification of security issues from commit messages and bug reports[c],"Zhou Y., Sharma A., Automated identification of security issues from commit messages and bug reports[C], Proceedings of the 2017 11th joint meeting on foundations of software engineering., pp. 914-919, (2017)"
finding more null pointer bugs,"Hovemeyer D., Pugh W., Finding more null pointer bugs, but not too many, Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE '07), pp. 9-14, (2007)"
learning unified features from natural and programming languages for locating buggy source code,"Huo X., Li M., Zhou Z.H., Et al., Learning Unified Features from Natural and Programming Languages for Locating Buggy Source Code, 16, pp. 1606-1612, (2016)"
deepbugs: a learning approach to name-based bug detection,"Pradel M., Sen K., DeepBugs: A learning approach to name-based bug detection, Proc. ACM Program. Lang., 2, OOPSLA, pp. 1471-147:25, (2018)"
a topic-based approach for narrowing the search space of buggy files from a bug report,"Nguyen A.T., Nguyen T.T., Al-Kofahi J., Nguyen H.V., Nguyen T.N., A topic-based approach for narrowing the search space of buggy files from a bug report, pp. 263-272, (2011)"
project proposal: learning variable mappings to repair programs,"Orvalho P., Piepenbrock J., Janota M., Manquinho V., Project Proposal: Learning Variable Mappings to Repair Programs, 7th Conference on Artificial Intelligence and Theorem Proving, AITP, (2022)"
automatic identifier inconsistency detection using code dictionary,"Kim S., Kim D., Automatic identifier inconsistency detection using code dictionary, Empir. Softw. Eng., 21, 2, pp. 565-604, (2016)"
understand by scitools,"Understand by scitools, (2021)"
finding bugs using your own code: detecting functionally-similar yet inconsistent code,"Ahmadi M., Farkhani R.M., Williams R., Lu L., Finding bugs using your own code: detecting functionally-similar yet inconsistent code, 30th USENIX Security Symposium (USENIX Security), (2021)"
the automatic classification of fault trigger based bug report,"Du X., Zheng Z., Xiao G., Yin B., The automatic classification of fault trigger based bug report, 2017 IEEE International Symposium on Software Reliability Engineering Workshops, pp. 259-265, (2017)"
how bugs are fixed: exposing bug-fix patterns with edits and nesting levels,"Rakibul Islam M., Zibran M.F., How bugs are fixed: Exposing bug-fix patterns with edits and nesting levels, Proceedings of the 35th Annual ACM Symposium on Applied Computing., pp. 1523-1531, (2020)"
mining fix patterns for findbugs violations,"Liu K., Kim D., Bissyande T.F., Yoo S., Le Traon Y., Mining fix patterns for FindBugs violations, IEEE Trans Softw Eng, 47, 1, pp. 165-188, (2018)"
getafix: learning to fix bugs automatically,"Bader J., Scott A., Pradel M., Chandra S., Getafix: Learning to fix bugs automatically, Proceedings of the ACM on Programming Languages, 3, pp. 1591-15927, (2019)"
classifying bug reports into bugs and non-bugs using lstm,"Qin H., Sun X., Classifying bug reports into bugs and non-bugs using lstm, Proceedings of the Tenth Asia-Pacific Symposium on Internetware, Internetware '18, (2018)"
chaff from the wheat: characterizing and determining valid bug reports,"Fan Y., Xia X., Lo D., Hassan A.E., Chaff from the wheat: Characterizing and determining valid bug reports, IEEE Transactions on Software Engineering, 46, 5, pp. 495-525, (2018)"
@tcomment: testing javadoc comments to detect comment-code inconsistencies,"Tan S.H., Marinov D., Tan L., Leavens G.T., @tcomment: Testing javadoc comments to detect comment-code inconsistencies, Proc. 5th IEEE Int. Conf. Softw. Testing, Verification Validation, pp. 260-269, (2012)"
learning to reduce false positives in analytic bug detectors,"Kharkar A., Moghaddam R.Z., Jin M., Liu X., Shi X., Clement C., Sundaresan N., Learning to reduce false positives in analytic bug detectors, Proceedings of the 44Th International Conference on Software Engineering, (2022)"
detecting duplicate bug report using character n-gram-based features,"Sureka A., Jalote P., Detecting duplicate bug report using character N-Gram-Based features, In: 2010 Asia Pacific Software Engineering Conference, pp. 366-374, (2010)"
characterizing and detecting antipatterns in the logging code,"Chen B., Ming Jiang Z., Characterizing and detecting antipatterns in the logging code, 2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE). 71-81, (2017)"
2022. path-sensitive and alias-aware typestate analysis for detecting os bugs,"Li T., Bai J., Sui Y., Hu S., 2022. Path-Sensitive and Alias-Aware Typestate Analysis for Detecting OS Bugs, Proceedings of the 27th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (Lausanne, Switzerland) (ASPLOS 2022). Association for Computing Machinery, New York, NY, USA, pp. 859-872"
automatically detecting and describing high level actions within methods,"Sridhara G., Pollock L., Vijay-Shanker K., Automatically detecting and describing high level actions within methods, 2011 33rd International Conference on Software Engineering (ICSE), pp. 101-110, (2011)"
detecting missing-check bugs via semantic-and context-aware criticalness and constraints inferences,"Lu K., Pakki A., Wu Q., Detecting missing-check bugs via semantic-and context-aware criticalness and constraints inferences, 28th USENIX Security Symposium, USENIX Security 2019, pp. 1769-1786, (2019)"
a deeper look into bug fixes: patterns,"Soto M., Thung F., Wong C., Le Goues C., Lo D., A deeper look into bug fixes: Patterns, replacements, deletions, and additions, Proceedings of the 13th International Conference on Mining Software Repositories, Msr '16, pp. 512-515, (2016)"
combating insider threats by user profiling from activity logging data,"Dahmane M., Foucher S., Combating Insider Threats By User Profiling From Activity Logging Data, 2018 1st International Conference on Data Intelligence and Security (ICDIS), pp. 194-199, (2018)"
intscope: automatically detecting integer overfow vulnerability in x86 binary using symbolic execution,"Wang T., Wei T., Lin Z., Zou W., IntScope: Automatically Detecting Integer Overfow Vulnerability In X86 Binary Using Symbolic Execution, Network & Distributed System Security Symposium (NDSS2009), (2009)"
